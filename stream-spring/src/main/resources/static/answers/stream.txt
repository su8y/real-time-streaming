스트리밍(Streaming)은 데이터의 연속적인 흐름을 의미하며, 일반적으로 큰 데이터 세트를 한 번에 처리하는 대신 점진적으로 데이터를 처리하는 방식을 말합니다. 스트리밍은 다양한 애플리케이션에서 사용되며, 특히 데이터 전송, 비디오 및 오디오 스트리밍, 실시간 데이터 처리 등에서 중요합니다.

## 스트리밍의 주요 개념

1. 연속적 데이터 전송:
    - 데이터가 한 번에 모두 전송되는 것이 아니라, 일정한 간격으로 조각(chunk) 단위로 전송됩니다. 이로 인해 대량의 데이터를 효율적으로 처리할 수 있습니다.
2. 비동기 처리:
    - 클라이언트는 데이터가 준비되는 즉시 스트리밍을 시작할 수 있습니다. 서버는 클라이언트가 요청한 데이터를 준비하는 동안 클라이언트와 연결을 유지할 수 있습니다.
3. 메모리 효율성:
    - 데이터를 한 번에 메모리에 로드하지 않고, 필요한 데이터만 로드하여 메모리 사용량을 줄일 수 있습니다. 이로 인해 큰 데이터 세트를 다루는 데 유리합니다.
4. 실시간 데이터 처리:
    - 스트리밍은 실시간 데이터 전송을 가능하게 하여, 사용자에게 즉시 정보를 제공할 수 있습니다. 예를 들어, 주식 가격, 스포츠 경기 점수 또는 뉴스 업데이트 등에서 사용됩니다.
5. 스트리밍의 사용 사례
    - 미디어 스트리밍:
        - 비디오(예: Netflix, YouTube) 및 오디오(예: Spotify) 서비스는 사용자가 다운로드를 기다리지 않고 즉시 콘텐츠를 재생할 수 있도록 합니다.
    - API 응답 스트리밍:
        - 웹 API에서 대량의 데이터를 스트리밍으로 전송하여 클라이언트가 데이터를 실시간으로 처리할 수 있게 합니다. 예를 들어, 서버-전송 이벤트(SSE) 또는 WebSocket을 사용할 수 있습니다.
    - 실시간 데이터 처리:
        -Apache Kafka와 같은 메시징 시스템은 실시간 데이터를 수집하고 처리하는 데 사용됩니다. 데이터가 생산되는 대로 소비자에게 전달됩니다.
    - 로그 스트리밍:
        - 서버 로그 파일을 실시간으로 모니터링하여 문제를 즉시 감지하고 대응할 수 있습니다.
6. 스트리밍 프로토콜
    - HTTP/1.1과 HTTP/2:
        - 기본적으로 HTTP 프로토콜을 통해 스트리밍할 수 있으며, 서버 전송 이벤트(SSE)와 WebSocket을 사용하여 양방향 통신이 가능합니다.
    - RTSP (Real-Time Streaming Protocol):
        - 비디오 및 오디오 스트리밍에 특화된 프로토콜로, 클라이언트와 서버 간의 실시간 데이터 전송을 지원합니다.
    - WebRTC:
        - 실시간 커뮤니케이션을 위한 프로토콜로, P2P(peer-to-peer) 데이터 전송을 지원하여 비디오 통화 및 실시간 데이터 공유에 적합합니다.
7. 스트리밍 예제
    - Fetch API:
        - ReadableStream을 사용하여 클라이언트에서 서버의 데이터를 스트리밍으로 읽어오는 방식.
    - Server-Sent Events (SSE):
        - 서버가 클라이언트에 실시간으로 데이터를 전송하는 방법. 예를 들어, 실시간 채팅 애플리케이션에서 사용될 수 있습니다.
    - WebSocket:
        - 클라이언트와 서버 간의 양방향 통신을 가능하게 하여 실시간 데이터를 주고받는 데 사용됩니다. 예를 들어, 온라인 게임이나 실시간 데이터 대시보드에서 사용될 수 있습니다.
8. 결론
    - 스트리밍은 데이터의 지속적이고 비동기적인 전송을 가능하게 하여, 사용자가 즉시 데이터를 처리하고 응답할 수 있는 장점을 제공합니다. 이는 다양한 애플리케이션에서 효율적인 데이터 처리를 가능하게 하며, 실시간 정보 제공 및 대규모 데이터 처리에 유용합니다.
